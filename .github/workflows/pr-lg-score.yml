name: PR Lighthouse Score
on:
  pull_request:
    branches:
      - main

jobs:
  lighthouse-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Check if secret is set
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "El secreto no estÃ¡ configurado. ${MI_SECRETO} ${MI_NOMBRE}"
          else
            echo "El secreto estÃ¡ configurado: longitud (${#MI_SECRETO}) caracteres."
          fi
        env:
          MI_SECRETO: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          MI_NOMBRE: ${{ vars.MI_NOMBRE }}

      - name: Obtain JWT Token
        id: jwt
        run: |
          # Get JWT token from API
          RESPONSE=$(curl --location 'https://dev-api.clip.mx/iam/user/login' \
            --header 'Accept: application/vnd.com.payclip.v1+json' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "email": "'"$IAM_EMAIL"'",
                "password": "'"$IAM_PASSWORD"'",
                "source": "M_DASHBOARD",
                "type": "LOGIN",
                "expiration_time":"PT72H"
            }')

          # Extract token from response
          JWT_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          # Check if token was obtained successfully
          if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
            echo "Failed to obtain JWT token"
            echo "$RESPONSE"
            exit 1
          fi

          # Save token to environment variable for subsequent steps
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV
          echo "Successfully obtained JWT token"
        env:
          IAM_EMAIL: ${{ secrets.IAM_EMAIL }}
          IAM_PASSWORD: ${{ secrets.IAM_PASSWORD }}

      - name: Run Lighthouse Check
        id: lighthouse
        uses: ./.github/actions/lighthouse-check
        with:
          url: 'http://localhost:4173'  # Default Vite preview URL
        env:
          JWT_TOKEN: ${{ needs.get-jwt-token.outputs.jwt_token }}

      - name: Comment on PR with Lighthouse results
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = JSON.parse('${{ steps.lighthouse.outputs.results }}');

            const formatScore = (score) => {
              const percentage = Math.round(score * 100);
              let emoji = 'ðŸ”´';
              if (percentage >= 90) emoji = 'ðŸŸ¢';
              else if (percentage >= 50) emoji = 'ðŸŸ ';
              return `${emoji} ${percentage}`;
            };

            const tableRows = [
              '| Metric | Score |',
              '| ------ | ----- |',
              `| Performance | ${formatScore(results.performance)} |`,
              `| Accessibility | ${formatScore(results.accessibility)} |`,
              `| Best Practices | ${formatScore(results.bestPractices)} |`,
              `| SEO | ${formatScore(results.seo)} |`,
              `| PWA | ${formatScore(results.pwa)} |`
            ];

            const htmlReportUrl = '${{ steps.lighthouse.outputs.htmlReportUrl }}';
            const comment = `## ðŸš€ Lighthouse Performance Results\n\n${tableRows.join('\n')}\n\n[View GitHub Action Run](${htmlReportUrl}) (download HTML report from the "Artifacts" section)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
