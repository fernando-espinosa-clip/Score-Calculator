name: Performance Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    name: Analyze URLs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Install serve
        run: npm install -g serve

      - name: Start local server
        run: serve -s dist &

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Check if secret is set
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "El secreto no está configurado. ${MI_SECRETO} ${MI_NOMBRE}"
          else
            echo "El secreto está configurado: longitud (${#MI_SECRETO}) caracteres."
          fi
        env:
          MI_SECRETO: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          MI_NOMBRE: ${{ vars.MI_NOMBRE }}

      - name: Obtain JWT Token
        id: jwt
        run: |
          # Get JWT token from API
          RESPONSE=$(curl --location 'https://dev-api.clip.mx/iam/user/login' \
            --header 'Accept: application/vnd.com.payclip.v1+json' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "email": "'"$IAM_EMAIL"'",
                "password": "'"$IAM_PASSWORD"'",
                "source": "M_DASHBOARD",
                "type": "LOGIN",
                "expiration_time":"PT72H"
            }')

          # Extract token from response
          JWT_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          # Check if token was obtained successfully
          if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
            echo "Failed to obtain JWT token"
            echo "$RESPONSE"
            exit 1
          fi

          # Save token to environment variable for subsequent steps
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV
          echo "Successfully obtained JWT token"
        env:
          IAM_EMAIL: ${{ secrets.IAM_EMAIL }}
          IAM_PASSWORD: ${{ secrets.IAM_PASSWORD }}

      - name: Create Lighthouse configuration for desktop
        run: |
          cat > lighthouserc-desktop.json << EOL
          {
            "ci": {
              "collect": {
                "settings": {
                  "output": ["json", "html"],
                  "extraHeaders": {
                    "Authorization": "Bearer ${JWT_TOKEN}"
                  },
                  "cookies": [
                    {
                      "name": "access_token",
                      "value": "${JWT_TOKEN}",
                      "domain": "localhost",
                      "path": "/"
                    }
                  ],
                  "formFactor": "desktop",
                  "screenEmulation": {
                    "mobile": false,
                    "width": 1350,
                    "height": 940,
                    "deviceScaleFactor": 1,
                    "disabled": false
                  }
                },
                "url": [
                  "http://localhost:3000/"
                ]
              },
              "upload": {
                "target": "filesystem",
                "outputDir": ".lighthouseci/desktop"
              }
            }
          }
          EOL

      - name: Create Lighthouse configuration for mobile
        run: |
          cat > lighthouserc-mobile.json << EOL
          {
            "ci": {
              "collect": {
                "settings": {
                  "output": ["json", "html"],
                  "extraHeaders": {
                    "Authorization": "Bearer ${JWT_TOKEN}"
                  },
                  "cookies": [
                    {
                      "name": "access_token",
                      "value": "${JWT_TOKEN}",
                      "domain": "localhost",
                      "path": "/"
                    }
                  ],
                  "formFactor": "mobile",
                  "screenEmulation": {
                    "mobile": true,
                    "width": 375,
                    "height": 667,
                    "deviceScaleFactor": 2,
                    "disabled": false
                  }
                },
                "url": [
                  "http://localhost:3000/"
                ]
              },
              "upload": {
                "target": "filesystem",
                "outputDir": ".lighthouseci/mobile"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI for Desktop
        id: lighthouse-desktop
        run: lhci autorun --config=lighthouserc-desktop.json || echo "::set-output name=lighthouse_desktop_failed::true"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || secrets.GITHUB_TOKEN }}
          JWT_TOKEN: ${{ env.JWT_TOKEN }}

      - name: Run Lighthouse CI for Mobile
        id: lighthouse-mobile
        run: lhci autorun --config=lighthouserc-mobile.json || echo "::set-output name=lighthouse_mobile_failed::true"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || secrets.GITHUB_TOKEN }}
          JWT_TOKEN: ${{ env.JWT_TOKEN }}

      - name: Debug Lighthouse Output
        run: |
          echo "Lighthouse Desktop Output Directory:"
          ls -l .lighthouseci/desktop

          echo "Lighthouse Mobile Output Directory:"
          ls -l .lighthouseci/mobile

      - name: Check Lighthouse Scores
        if: always()
        run: |
          # Function to extract and save scores
          extract_scores() {
            local device=$1
            local report_path=$2
            local output_file=$3

            echo "Using $device report: $report_path"

            # Extract scores
            local performance=$(jq '.categories.performance.score' $report_path)
            local accessibility=$(jq '.categories.accessibility.score' $report_path)
            local best_practices=$(jq '.categories["best-practices"].score' $report_path)
            local seo=$(jq '.categories.seo.score' $report_path)

            # Save scores to a file for later use
            echo "${device}_PERFORMANCE=$performance" > $output_file
            echo "${device}_ACCESSIBILITY=$accessibility" >> $output_file
            echo "${device}_BEST_PRACTICES=$best_practices" >> $output_file
            echo "${device}_SEO=$seo" >> $output_file

            # Check if scores are below 0.8 but above 0.5
            if (( $(echo "$accessibility < 0.8 && $accessibility >= 0.5" | bc -l) )); then
              echo "::warning::$device Accessibility score is below 0.8: $accessibility"
            fi

            if (( $(echo "$best_practices < 0.8 && $best_practices >= 0.5" | bc -l) )); then
              echo "::warning::$device Best Practices score is below 0.8: $best_practices"
            fi

            if (( $(echo "$seo < 0.8 && $seo >= 0.5" | bc -l) )); then
              echo "::warning::$device SEO score is below 0.8: $seo"
            fi
          }

          # Check desktop scores
          if [ $(ls .lighthouseci/desktop/lhr-*.json 2>/dev/null | wc -l) -gt 0 ]; then
            DESKTOP_REPORT_PATH=$(ls -t .lighthouseci/desktop/lhr-*.json | head -n 1)
            extract_scores "DESKTOP" "$DESKTOP_REPORT_PATH" "lighthouse-desktop-scores.txt"
          else
            echo "No Desktop Lighthouse report found"
            # Create empty scores file with default values
            echo "DESKTOP_PERFORMANCE=N/A" > lighthouse-desktop-scores.txt
            echo "DESKTOP_ACCESSIBILITY=N/A" >> lighthouse-desktop-scores.txt
            echo "DESKTOP_BEST_PRACTICES=N/A" >> lighthouse-desktop-scores.txt
            echo "DESKTOP_SEO=N/A" >> lighthouse-desktop-scores.txt
          fi

          # Check mobile scores
          if [ $(ls .lighthouseci/mobile/lhr-*.json 2>/dev/null | wc -l) -gt 0 ]; then
            MOBILE_REPORT_PATH=$(ls -t .lighthouseci/mobile/lhr-*.json | head -n 1)
            extract_scores "MOBILE" "$MOBILE_REPORT_PATH" "lighthouse-mobile-scores.txt"
          else
            echo "No Mobile Lighthouse report found"
            # Create empty scores file with default values
            echo "MOBILE_PERFORMANCE=N/A" > lighthouse-mobile-scores.txt
            echo "MOBILE_ACCESSIBILITY=N/A" >> lighthouse-mobile-scores.txt
            echo "MOBILE_BEST_PRACTICES=N/A" >> lighthouse-mobile-scores.txt
            echo "MOBILE_SEO=N/A" >> lighthouse-mobile-scores.txt
          fi

          # Combine scores into a single file for backward compatibility
          cat lighthouse-desktop-scores.txt lighthouse-mobile-scores.txt > lighthouse-scores.txt

      - name: Generate Performance Report
        run: |
          # Function to format scores as percentages
          format_score() {
            local score=$1
            if [ "$score" != "N/A" ]; then
              local pct=$(echo "$score * 100" | bc)
              echo "${pct%.*}%"
            else
              echo "N/A"
            fi
          }

          # Load desktop scores
          if [ -f "lighthouse-desktop-scores.txt" ]; then
            source lighthouse-desktop-scores.txt
          else
            DESKTOP_PERFORMANCE="N/A"
            DESKTOP_ACCESSIBILITY="N/A"
            DESKTOP_BEST_PRACTICES="N/A"
            DESKTOP_SEO="N/A"
          fi

          # Load mobile scores
          if [ -f "lighthouse-mobile-scores.txt" ]; then
            source lighthouse-mobile-scores.txt
          else
            MOBILE_PERFORMANCE="N/A"
            MOBILE_ACCESSIBILITY="N/A"
            MOBILE_BEST_PRACTICES="N/A"
            MOBILE_SEO="N/A"
          fi

          # Format desktop scores
          DESKTOP_PERFORMANCE_PCT=$(format_score "$DESKTOP_PERFORMANCE")
          DESKTOP_ACCESSIBILITY_PCT=$(format_score "$DESKTOP_ACCESSIBILITY")
          DESKTOP_BEST_PRACTICES_PCT=$(format_score "$DESKTOP_BEST_PRACTICES")
          DESKTOP_SEO_PCT=$(format_score "$DESKTOP_SEO")

          # Format mobile scores
          MOBILE_PERFORMANCE_PCT=$(format_score "$MOBILE_PERFORMANCE")
          MOBILE_ACCESSIBILITY_PCT=$(format_score "$MOBILE_ACCESSIBILITY")
          MOBILE_BEST_PRACTICES_PCT=$(format_score "$MOBILE_BEST_PRACTICES")
          MOBILE_SEO_PCT=$(format_score "$MOBILE_SEO")

          echo "# Performance Analysis Results" > performance-report.md
          echo "" >> performance-report.md
          echo "## URLs Analyzed" >> performance-report.md
          echo "- Local build: http://localhost:3000/" >> performance-report.md
          echo "" >> performance-report.md

          echo "## Desktop Scores" >> performance-report.md
          echo "| Category | Score |" >> performance-report.md
          echo "| -------- | ----- |" >> performance-report.md
          echo "| Performance | $DESKTOP_PERFORMANCE_PCT |" >> performance-report.md
          echo "| Accessibility | $DESKTOP_ACCESSIBILITY_PCT |" >> performance-report.md
          echo "| Best Practices | $DESKTOP_BEST_PRACTICES_PCT |" >> performance-report.md
          echo "| SEO | $DESKTOP_SEO_PCT |" >> performance-report.md
          echo "" >> performance-report.md

          echo "## Mobile Scores" >> performance-report.md
          echo "| Category | Score |" >> performance-report.md
          echo "| -------- | ----- |" >> performance-report.md
          echo "| Performance | $MOBILE_PERFORMANCE_PCT |" >> performance-report.md
          echo "| Accessibility | $MOBILE_ACCESSIBILITY_PCT |" >> performance-report.md
          echo "| Best Practices | $MOBILE_BEST_PRACTICES_PCT |" >> performance-report.md
          echo "| SEO | $MOBILE_SEO_PCT |" >> performance-report.md
          echo "" >> performance-report.md

          echo "## Thresholds" >> performance-report.md
          echo "- Performance: Error if below 0.8" >> performance-report.md
          echo "- Accessibility: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- Best Practices: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- SEO: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Summary" >> performance-report.md
          echo "This analysis was performed on the local build of the PR branch with a JWT token obtained from the API and injected as both an Authorization header and an access_token cookie before each evaluation. Tests were run for both desktop and mobile devices." >> performance-report.md

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/desktop/*
            .lighthouseci/mobile/*
