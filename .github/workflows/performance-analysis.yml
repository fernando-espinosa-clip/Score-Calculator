name: Performance Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    name: Analyze URLs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Install serve
        run: npm install -g serve

      - name: Start local server
        run: serve -s dist -l 3000 --no-clipboard &

      - name: Wait for server to be ready
        run: |
          # Wait for the server to be ready
          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/ > /dev/null; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 1
          done

          # Verify server is accessible
          if ! curl -s http://localhost:3000/ > /dev/null; then
            echo "Server is not accessible at http://localhost:3000/"
            echo "Trying to start server with explicit port..."
            pkill -f "serve -s dist"
            serve -s dist -l 3000 --no-clipboard &
            sleep 5

            # Check again
            if curl -s http://localhost:3000/ > /dev/null; then
              echo "Server is now accessible at http://localhost:3000/"
            else
              echo "Server is still not accessible. This might cause Lighthouse to fail."
            fi
          fi

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Check if secret is set
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "El secreto no está configurado. ${MI_SECRETO} ${MI_NOMBRE}"
          else
            echo "El secreto está configurado: longitud (${#MI_SECRETO}) caracteres."
          fi
        env:
          MI_SECRETO: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          MI_NOMBRE: ${{ vars.MI_NOMBRE }}

      - name: Obtain JWT Token
        id: jwt
        uses: ./.github/actions/get-jwt-token
        with:
          iam_email: ${{ secrets.IAM_EMAIL }}
          iam_password: ${{ secrets.IAM_PASSWORD }}

      - name: Create Lighthouse configuration
        run: |
          cat > lighthouserc-desktop.json << EOL
          {
            "ci": {
              "collect": {
                "settings": {
                  "output": ["json", "html"],
                  "formFactor": "desktop",
                  "screenEmulation": {
                    "mobile": false,
                    "width": 1350,
                    "height": 940,
                    "deviceScaleFactor": 1,
                    "disabled": false
                  },
                  "extraHeaders": {
                    "Authorization": "Bearer ${JWT_TOKEN}"
                  },
                  "cookies": [
                    {
                      "name": "access_token",
                      "value": "${JWT_TOKEN}",
                      "domain": "localhost",
                      "path": "/"
                    }
                  ]
                },
                "url": [
                  "http://localhost:3000/"
                ]
              },
              "upload": {
                "target": "filesystem",
                "outputDir": ".lighthouseci/desktop"
              }
            }
          }
          EOL

          cat > lighthouserc-mobile.json << EOL
          {
            "ci": {
              "collect": {
                "settings": {
                  "output": ["json", "html"],
                  "formFactor": "mobile",
                  "screenEmulation": {
                    "mobile": true,
                    "width": 375,
                    "height": 667,
                    "deviceScaleFactor": 2,
                    "disabled": false
                  },
                  "extraHeaders": {
                    "Authorization": "Bearer ${JWT_TOKEN}"
                  },
                  "cookies": [
                    {
                      "name": "access_token",
                      "value": "${JWT_TOKEN}",
                      "domain": "localhost",
                      "path": "/"
                    }
                  ]
                },
                "url": [
                  "http://localhost:3000/"
                ]
              },
              "upload": {
                "target": "filesystem",
                "outputDir": ".lighthouseci/mobile"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI for Desktop
        id: lighthouse-desktop
        run: lhci autorun --config=lighthouserc-desktop.json || echo "::set-output name=lighthouse_desktop_failed::true"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || secrets.GITHUB_TOKEN }}
          JWT_TOKEN: ${{ env.JWT_TOKEN }}

      - name: Run Lighthouse CI for Mobile
        id: lighthouse-mobile
        run: lhci autorun --config=lighthouserc-mobile.json || echo "::set-output name=lighthouse_mobile_failed::true"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || secrets.GITHUB_TOKEN }}
          JWT_TOKEN: ${{ env.JWT_TOKEN }}

      - name: Debug Lighthouse Output
        run: |
          echo "Lighthouse Desktop Output Directory:"
          ls -l .lighthouseci/desktop

          echo "Lighthouse Mobile Output Directory:"
          ls -l .lighthouseci/mobile

      - name: Check Lighthouse Scores
        if: always()
        run: |
          # Process Desktop Report
          if [ $(ls .lighthouseci/desktop/lhr-*.json 2>/dev/null | wc -l) -gt 0 ]; then
            DESKTOP_REPORT_PATH=$(ls -t .lighthouseci/desktop/lhr-*.json | head -n 1)
            echo "Using desktop report: $DESKTOP_REPORT_PATH"

            # Extract desktop scores
            DESKTOP_PERFORMANCE=$(jq '.categories.performance.score' $DESKTOP_REPORT_PATH)
            DESKTOP_ACCESSIBILITY=$(jq '.categories.accessibility.score' $DESKTOP_REPORT_PATH)
            DESKTOP_BEST_PRACTICES=$(jq '.categories["best-practices"].score' $DESKTOP_REPORT_PATH)
            DESKTOP_SEO=$(jq '.categories.seo.score' $DESKTOP_REPORT_PATH)

            # Save desktop scores to a file for later use
            echo "DESKTOP_PERFORMANCE=$DESKTOP_PERFORMANCE" > lighthouse-scores-desktop.txt
            echo "DESKTOP_ACCESSIBILITY=$DESKTOP_ACCESSIBILITY" >> lighthouse-scores-desktop.txt
            echo "DESKTOP_BEST_PRACTICES=$DESKTOP_BEST_PRACTICES" >> lighthouse-scores-desktop.txt
            echo "DESKTOP_SEO=$DESKTOP_SEO" >> lighthouse-scores-desktop.txt

            # Check if desktop scores are below 0.8 but above 0.5
            if (( $(echo "$DESKTOP_ACCESSIBILITY < 0.8 && $DESKTOP_ACCESSIBILITY >= 0.5" | bc -l) )); then
              echo "::warning::Desktop Accessibility score is below 0.8: $DESKTOP_ACCESSIBILITY"
            fi

            if (( $(echo "$DESKTOP_BEST_PRACTICES < 0.8 && $DESKTOP_BEST_PRACTICES >= 0.5" | bc -l) )); then
              echo "::warning::Desktop Best Practices score is below 0.8: $DESKTOP_BEST_PRACTICES"
            fi

            if (( $(echo "$DESKTOP_SEO < 0.8 && $DESKTOP_SEO >= 0.5" | bc -l) )); then
              echo "::warning::Desktop SEO score is below 0.8: $DESKTOP_SEO"
            fi
          else
            echo "No Desktop Lighthouse report found"
            # Create empty desktop scores file with default values
            echo "DESKTOP_PERFORMANCE=N/A" > lighthouse-scores-desktop.txt
            echo "DESKTOP_ACCESSIBILITY=N/A" >> lighthouse-scores-desktop.txt
            echo "DESKTOP_BEST_PRACTICES=N/A" >> lighthouse-scores-desktop.txt
            echo "DESKTOP_SEO=N/A" >> lighthouse-scores-desktop.txt
          fi

          # Process Mobile Report
          if [ $(ls .lighthouseci/mobile/lhr-*.json 2>/dev/null | wc -l) -gt 0 ]; then
            MOBILE_REPORT_PATH=$(ls -t .lighthouseci/mobile/lhr-*.json | head -n 1)
            echo "Using mobile report: $MOBILE_REPORT_PATH"

            # Extract mobile scores
            MOBILE_PERFORMANCE=$(jq '.categories.performance.score' $MOBILE_REPORT_PATH)
            MOBILE_ACCESSIBILITY=$(jq '.categories.accessibility.score' $MOBILE_REPORT_PATH)
            MOBILE_BEST_PRACTICES=$(jq '.categories["best-practices"].score' $MOBILE_REPORT_PATH)
            MOBILE_SEO=$(jq '.categories.seo.score' $MOBILE_REPORT_PATH)

            # Save mobile scores to a file for later use
            echo "MOBILE_PERFORMANCE=$MOBILE_PERFORMANCE" > lighthouse-scores-mobile.txt
            echo "MOBILE_ACCESSIBILITY=$MOBILE_ACCESSIBILITY" >> lighthouse-scores-mobile.txt
            echo "MOBILE_BEST_PRACTICES=$MOBILE_BEST_PRACTICES" >> lighthouse-scores-mobile.txt
            echo "MOBILE_SEO=$MOBILE_SEO" >> lighthouse-scores-mobile.txt

            # Check if mobile scores are below 0.8 but above 0.5
            if (( $(echo "$MOBILE_ACCESSIBILITY < 0.8 && $MOBILE_ACCESSIBILITY >= 0.5" | bc -l) )); then
              echo "::warning::Mobile Accessibility score is below 0.8: $MOBILE_ACCESSIBILITY"
            fi

            if (( $(echo "$MOBILE_BEST_PRACTICES < 0.8 && $MOBILE_BEST_PRACTICES >= 0.5" | bc -l) )); then
              echo "::warning::Mobile Best Practices score is below 0.8: $MOBILE_BEST_PRACTICES"
            fi

            if (( $(echo "$MOBILE_SEO < 0.8 && $MOBILE_SEO >= 0.5" | bc -l) )); then
              echo "::warning::Mobile SEO score is below 0.8: $MOBILE_SEO"
            fi
          else
            echo "No Mobile Lighthouse report found"
            # Create empty mobile scores file with default values
            echo "MOBILE_PERFORMANCE=N/A" > lighthouse-scores-mobile.txt
            echo "MOBILE_ACCESSIBILITY=N/A" >> lighthouse-scores-mobile.txt
            echo "MOBILE_BEST_PRACTICES=N/A" >> lighthouse-scores-mobile.txt
            echo "MOBILE_SEO=N/A" >> lighthouse-scores-mobile.txt
          fi

      - name: Generate Performance Report
        run: |
          # Load desktop scores from file
          if [ -f "lighthouse-scores-desktop.txt" ]; then
            source lighthouse-scores-desktop.txt
          else
            DESKTOP_PERFORMANCE="N/A"
            DESKTOP_ACCESSIBILITY="N/A"
            DESKTOP_BEST_PRACTICES="N/A"
            DESKTOP_SEO="N/A"
          fi

          # Load mobile scores from file
          if [ -f "lighthouse-scores-mobile.txt" ]; then
            source lighthouse-scores-mobile.txt
          else
            MOBILE_PERFORMANCE="N/A"
            MOBILE_ACCESSIBILITY="N/A"
            MOBILE_BEST_PRACTICES="N/A"
            MOBILE_SEO="N/A"
          fi

          # Format desktop scores as percentages
          if [ "$DESKTOP_PERFORMANCE" != "N/A" ]; then
            DESKTOP_PERFORMANCE_PCT=$(echo "$DESKTOP_PERFORMANCE * 100" | bc)
            DESKTOP_PERFORMANCE_PCT="${DESKTOP_PERFORMANCE_PCT%.*}%"
          else
            DESKTOP_PERFORMANCE_PCT="N/A"
          fi

          if [ "$DESKTOP_ACCESSIBILITY" != "N/A" ]; then
            DESKTOP_ACCESSIBILITY_PCT=$(echo "$DESKTOP_ACCESSIBILITY * 100" | bc)
            DESKTOP_ACCESSIBILITY_PCT="${DESKTOP_ACCESSIBILITY_PCT%.*}%"
          else
            DESKTOP_ACCESSIBILITY_PCT="N/A"
          fi

          if [ "$DESKTOP_BEST_PRACTICES" != "N/A" ]; then
            DESKTOP_BEST_PRACTICES_PCT=$(echo "$DESKTOP_BEST_PRACTICES * 100" | bc)
            DESKTOP_BEST_PRACTICES_PCT="${DESKTOP_BEST_PRACTICES_PCT%.*}%"
          else
            DESKTOP_BEST_PRACTICES_PCT="N/A"
          fi

          if [ "$DESKTOP_SEO" != "N/A" ]; then
            DESKTOP_SEO_PCT=$(echo "$DESKTOP_SEO * 100" | bc)
            DESKTOP_SEO_PCT="${DESKTOP_SEO_PCT%.*}%"
          else
            DESKTOP_SEO_PCT="N/A"
          fi

          # Format mobile scores as percentages
          if [ "$MOBILE_PERFORMANCE" != "N/A" ]; then
            MOBILE_PERFORMANCE_PCT=$(echo "$MOBILE_PERFORMANCE * 100" | bc)
            MOBILE_PERFORMANCE_PCT="${MOBILE_PERFORMANCE_PCT%.*}%"
          else
            MOBILE_PERFORMANCE_PCT="N/A"
          fi

          if [ "$MOBILE_ACCESSIBILITY" != "N/A" ]; then
            MOBILE_ACCESSIBILITY_PCT=$(echo "$MOBILE_ACCESSIBILITY * 100" | bc)
            MOBILE_ACCESSIBILITY_PCT="${MOBILE_ACCESSIBILITY_PCT%.*}%"
          else
            MOBILE_ACCESSIBILITY_PCT="N/A"
          fi

          if [ "$MOBILE_BEST_PRACTICES" != "N/A" ]; then
            MOBILE_BEST_PRACTICES_PCT=$(echo "$MOBILE_BEST_PRACTICES * 100" | bc)
            MOBILE_BEST_PRACTICES_PCT="${MOBILE_BEST_PRACTICES_PCT%.*}%"
          else
            MOBILE_BEST_PRACTICES_PCT="N/A"
          fi

          if [ "$MOBILE_SEO" != "N/A" ]; then
            MOBILE_SEO_PCT=$(echo "$MOBILE_SEO * 100" | bc)
            MOBILE_SEO_PCT="${MOBILE_SEO_PCT%.*}%"
          else
            MOBILE_SEO_PCT="N/A"
          fi

          echo "# Performance Analysis Results" > performance-report.md
          echo "" >> performance-report.md
          echo "## URLs Analyzed" >> performance-report.md
          echo "- Local build: http://localhost:3000/" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Desktop Scores" >> performance-report.md
          echo "| Category | Score |" >> performance-report.md
          echo "| -------- | ----- |" >> performance-report.md
          echo "| Performance | $DESKTOP_PERFORMANCE_PCT |" >> performance-report.md
          echo "| Accessibility | $DESKTOP_ACCESSIBILITY_PCT |" >> performance-report.md
          echo "| Best Practices | $DESKTOP_BEST_PRACTICES_PCT |" >> performance-report.md
          echo "| SEO | $DESKTOP_SEO_PCT |" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Mobile Scores" >> performance-report.md
          echo "| Category | Score |" >> performance-report.md
          echo "| -------- | ----- |" >> performance-report.md
          echo "| Performance | $MOBILE_PERFORMANCE_PCT |" >> performance-report.md
          echo "| Accessibility | $MOBILE_ACCESSIBILITY_PCT |" >> performance-report.md
          echo "| Best Practices | $MOBILE_BEST_PRACTICES_PCT |" >> performance-report.md
          echo "| SEO | $MOBILE_SEO_PCT |" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Thresholds" >> performance-report.md
          echo "- Performance: Error if below 0.8" >> performance-report.md
          echo "- Accessibility: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- Best Practices: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- SEO: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Summary" >> performance-report.md
          echo "This analysis was performed on the local build of the PR branch with a JWT token obtained from the API and injected as both an Authorization header and an access_token cookie before each evaluation. Tests were run in both desktop and mobile modes." >> performance-report.md

          echo "## Lighthouse Report URLs" >> performance-report.md
          echo "The Lighthouse HTML reports are available as artifacts in this workflow run:" >> performance-report.md

          # Find the desktop HTML report file
          DESKTOP_HTML_REPORT=$(ls -t .lighthouseci/desktop/lhr-*.html 2>/dev/null | head -n 1)
          if [ -n "$DESKTOP_HTML_REPORT" ]; then
            DESKTOP_HTML_FILENAME=$(basename "$DESKTOP_HTML_REPORT")
            echo "### Desktop Report" >> performance-report.md
            echo "1. Go to: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> performance-report.md
            echo "2. Download the 'lighthouse-reports' artifact" >> performance-report.md
            echo "3. Open the file: **desktop/$DESKTOP_HTML_FILENAME**" >> performance-report.md
          fi

          # Find the mobile HTML report file
          MOBILE_HTML_REPORT=$(ls -t .lighthouseci/mobile/lhr-*.html 2>/dev/null | head -n 1)
          if [ -n "$MOBILE_HTML_REPORT" ]; then
            MOBILE_HTML_FILENAME=$(basename "$MOBILE_HTML_REPORT")
            echo "### Mobile Report" >> performance-report.md
            echo "1. Go to: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> performance-report.md
            echo "2. Download the 'lighthouse-reports' artifact" >> performance-report.md
            echo "3. Open the file: **mobile/$MOBILE_HTML_FILENAME**" >> performance-report.md
          fi

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/desktop/*
            .lighthouseci/mobile/*
