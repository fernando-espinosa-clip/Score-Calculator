name: Performance Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    name: Analyze URLs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Install serve
        run: npm install -g serve

      - name: Start local server
        run: serve -s dist &

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Create Lighthouse configuration
        run: |
          cat > lighthouserc.json << 'EOL'
          {
            "ci": {
              "collect": {
                "settings": {
                  "output": ["json", "html"]
                },
                "url": [
                  "http://localhost:3000/"
                ]
              },
              "upload": {
                "target": "filesystem",
                "outputDir": ".lighthouseci"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI
        id: lighthouse
        run: lhci autorun || echo "::set-output name=lighthouse_failed::true"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Debug Lighthouse Output
        run: |
          echo "Lighthouse Output Directory:"
          ls -l .lighthouseci

      - name: Check Lighthouse Scores
        if: always()
        run: |
          if [ $(ls .lighthouseci/lhr-*.json 2>/dev/null | wc -l) -gt 0 ]; then
            REPORT_PATH=$(ls -t .lighthouseci/lhr-*.json | head -n 1)
            echo "Using report: $REPORT_PATH"

            # Extract scores
            ACCESSIBILITY=$(jq '.categories.accessibility.score' $REPORT_PATH)
            BEST_PRACTICES=$(jq '.categories["best-practices"].score' $REPORT_PATH)
            SEO=$(jq '.categories.seo.score' $REPORT_PATH)

            # Check if scores are below 0.8 but above 0.5
            if (( $(echo "$ACCESSIBILITY < 0.8 && $ACCESSIBILITY >= 0.5" | bc -l) )); then
              echo "::warning::Accessibility score is below 0.8: $ACCESSIBILITY"
            fi

            if (( $(echo "$BEST_PRACTICES < 0.8 && $BEST_PRACTICES >= 0.5" | bc -l) )); then
              echo "::warning::Best Practices score is below 0.8: $BEST_PRACTICES"
            fi

            if (( $(echo "$SEO < 0.8 && $SEO >= 0.5" | bc -l) )); then
              echo "::warning::SEO score is below 0.8: $SEO"
            fi
          else
            echo "No Lighthouse report found"
          fi

      - name: Generate Performance Report
        run: |
          echo "# Performance Analysis Results" > performance-report.md
          echo "" >> performance-report.md
          echo "## URLs Analyzed" >> performance-report.md
          echo "- Local build: http://localhost:3000/" >> performance-report.md
          echo "- Local build: http://localhost:3000/?page=results" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Scores" >> performance-report.md
          echo "The detailed scores can be found in the Lighthouse CI report." >> performance-report.md
          echo "" >> performance-report.md
          echo "## Thresholds" >> performance-report.md
          echo "- Performance: Error if below 0.8" >> performance-report.md
          echo "- Accessibility: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- Best Practices: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- SEO: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Summary" >> performance-report.md
          echo "This analysis was performed on the local build of the PR branch with an access_token cookie injected before each evaluation." >> performance-report.md

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/*