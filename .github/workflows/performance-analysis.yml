name: Performance Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest
    name: Analyze URLs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.6.0

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build

      - name: Install serve
        run: npm install -g serve

      - name: Start local server
        run: serve -s dist &

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Check if secret is set
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "El secreto no está configurado. ${MI_SECRETO} ${MI_NOMBRE}"
          else
            echo "El secreto está configurado: longitud (${#MI_SECRETO}) caracteres."
          fi
        env:
          MI_SECRETO: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          MI_NOMBRE: ${{ vars.MI_NOMBRE }}

      - name: Obtain JWT Token
        id: jwt
        run: |
          # TEMPORARY DEBUG CODE - Will be removed later
          echo "==== DEBUG: CURL COMMAND STRUCTURE ===="
          echo "curl --location 'https://dev-api.clip.mx/iam/user/login' \
            --header 'Accept: application/vnd.com.payclip.v1+json' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                \"email\": \"$IAM_EMAIL\",
                \"password\": \"$IAM_PASSWORD\",
                \"source\": \"M_DARD\",
                \"type\": \"LOGIN\",
                \"expiration_time\": \"PT72H\"
            }'"
          echo "========================================"

          # Get JWT token from API
          RESPONSE=$(curl --location 'https://dev-api.clip.mx/iam/user/login' \
            --header 'Accept: application/vnd.com.payclip.v1+json' \
            --header 'Content-Type: application/json' \
            --data-raw '{
                "email": "hector.nicanor@payclip.com",
                "password": "Clip2024!3",
                "source": "M_DASHBOARD",
                "type": "LOGIN",
                "expiration_time":"PT72H"
            }')

          # TEMPORARY DEBUG CODE - Will be removed later
          echo "==== DEBUG: API RESPONSE ===="
          echo "$RESPONSE" | jq '.'
          echo "============================"

          # Extract token from response
          JWT_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          # Check if token was obtained successfully
          if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
            echo "Failed to obtain JWT token"
            echo "$RESPONSE"
            exit 1
          fi

          # Save token to environment variable for subsequent steps
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV
          echo "Successfully obtained JWT token"
        env:
          IAM_EMAIL: ${{ vars.IAM_EMAIL }}
          IAM_PASSWORD: ${{ vars.IAM_PASSWORD }}

      - name: Create Lighthouse configuration
        run: |
          cat > lighthouserc.json << EOL
          {
            "ci": {
              "collect": {
                "settings": {
                  "output": ["json", "html"],
                  "extraHeaders": {
                    "Authorization": "Bearer ${JWT_TOKEN}"
                  },
                  "cookies": [
                    {
                      "name": "access_token",
                      "value": "${JWT_TOKEN}",
                      "domain": "localhost",
                      "path": "/"
                    }
                  ]
                },
                "url": [
                  "http://localhost:3000/"
                ]
              },
              "upload": {
                "target": "filesystem",
                "outputDir": ".lighthouseci"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI
        id: lighthouse
        run: lhci autorun || echo "::set-output name=lighthouse_failed::true"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || secrets.GITHUB_TOKEN }}
          JWT_TOKEN: ${{ env.JWT_TOKEN }}

      - name: Debug Lighthouse Output
        run: |
          echo "Lighthouse Output Directory:"
          ls -l .lighthouseci

      - name: Check Lighthouse Scores
        if: always()
        run: |
          if [ $(ls .lighthouseci/lhr-*.json 2>/dev/null | wc -l) -gt 0 ]; then
            REPORT_PATH=$(ls -t .lighthouseci/lhr-*.json | head -n 1)
            echo "Using report: $REPORT_PATH"

            # Extract scores
            PERFORMANCE=$(jq '.categories.performance.score' $REPORT_PATH)
            ACCESSIBILITY=$(jq '.categories.accessibility.score' $REPORT_PATH)
            BEST_PRACTICES=$(jq '.categories["best-practices"].score' $REPORT_PATH)
            SEO=$(jq '.categories.seo.score' $REPORT_PATH)

            # Save scores to a file for later use
            echo "PERFORMANCE=$PERFORMANCE" > lighthouse-scores.txt
            echo "ACCESSIBILITY=$ACCESSIBILITY" >> lighthouse-scores.txt
            echo "BEST_PRACTICES=$BEST_PRACTICES" >> lighthouse-scores.txt
            echo "SEO=$SEO" >> lighthouse-scores.txt

            # Check if scores are below 0.8 but above 0.5
            if (( $(echo "$ACCESSIBILITY < 0.8 && $ACCESSIBILITY >= 0.5" | bc -l) )); then
              echo "::warning::Accessibility score is below 0.8: $ACCESSIBILITY"
            fi

            if (( $(echo "$BEST_PRACTICES < 0.8 && $BEST_PRACTICES >= 0.5" | bc -l) )); then
              echo "::warning::Best Practices score is below 0.8: $BEST_PRACTICES"
            fi

            if (( $(echo "$SEO < 0.8 && $SEO >= 0.5" | bc -l) )); then
              echo "::warning::SEO score is below 0.8: $SEO"
            fi
          else
            echo "No Lighthouse report found"
            # Create empty scores file with default values
            echo "PERFORMANCE=N/A" > lighthouse-scores.txt
            echo "ACCESSIBILITY=N/A" >> lighthouse-scores.txt
            echo "BEST_PRACTICES=N/A" >> lighthouse-scores.txt
            echo "SEO=N/A" >> lighthouse-scores.txt
          fi

      - name: Generate Performance Report
        run: |
          # Load scores from file
          if [ -f "lighthouse-scores.txt" ]; then
            source lighthouse-scores.txt
          else
            PERFORMANCE="N/A"
            ACCESSIBILITY="N/A"
            BEST_PRACTICES="N/A"
            SEO="N/A"
          fi

          # Format scores as percentages
          if [ "$PERFORMANCE" != "N/A" ]; then
            PERFORMANCE_PCT=$(echo "$PERFORMANCE * 100" | bc)
            PERFORMANCE_PCT="${PERFORMANCE_PCT%.*}%"
          else
            PERFORMANCE_PCT="N/A"
          fi

          if [ "$ACCESSIBILITY" != "N/A" ]; then
            ACCESSIBILITY_PCT=$(echo "$ACCESSIBILITY * 100" | bc)
            ACCESSIBILITY_PCT="${ACCESSIBILITY_PCT%.*}%"
          else
            ACCESSIBILITY_PCT="N/A"
          fi

          if [ "$BEST_PRACTICES" != "N/A" ]; then
            BEST_PRACTICES_PCT=$(echo "$BEST_PRACTICES * 100" | bc)
            BEST_PRACTICES_PCT="${BEST_PRACTICES_PCT%.*}%"
          else
            BEST_PRACTICES_PCT="N/A"
          fi

          if [ "$SEO" != "N/A" ]; then
            SEO_PCT=$(echo "$SEO * 100" | bc)
            SEO_PCT="${SEO_PCT%.*}%"
          else
            SEO_PCT="N/A"
          fi

          echo "# Performance Analysis Results" > performance-report.md
          echo "" >> performance-report.md
          echo "## URLs Analyzed" >> performance-report.md
          echo "- Local build: http://localhost:3000/" >> performance-report.md
          echo "- Local build: http://localhost:3000/?page=results" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Scores" >> performance-report.md
          echo "| Category | Score |" >> performance-report.md
          echo "| -------- | ----- |" >> performance-report.md
          echo "| Performance | $PERFORMANCE_PCT |" >> performance-report.md
          echo "| Accessibility | $ACCESSIBILITY_PCT |" >> performance-report.md
          echo "| Best Practices | $BEST_PRACTICES_PCT |" >> performance-report.md
          echo "| SEO | $SEO_PCT |" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Thresholds" >> performance-report.md
          echo "- Performance: Error if below 0.8" >> performance-report.md
          echo "- Accessibility: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- Best Practices: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- SEO: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Summary" >> performance-report.md
          echo "This analysis was performed on the local build of the PR branch with a JWT token obtained from the API and injected as both an Authorization header and an access_token cookie before each evaluation." >> performance-report.md

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Upload Lighthouse Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/*