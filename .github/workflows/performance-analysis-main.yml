name: Performance Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  get_jwt:
    name: Get JWT Token
    uses: ./.github/workflows/get-jwt-token.yml
    secrets:
      IAM_EMAIL: ${{ secrets.IAM_EMAIL }}
      IAM_PASSWORD: ${{ secrets.IAM_PASSWORD }}

  lighthouse:
    name: Run Lighthouse Evaluation
    needs: get_jwt
    uses: ./.github/workflows/lighthouse-evaluation.yml
    with:
      jwt_token: ${{ needs.get_jwt.outputs.jwt_token }}
    secrets:
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  download_artifacts:
    name: Download and Re-upload Artifacts
    needs: lighthouse
    runs-on: ubuntu-latest
    steps:
      - name: Download Lighthouse Reports from Called Workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: lighthouse-evaluation.yml
          name: lighthouse-reports
          path: .lighthouseci

      - name: Upload Lighthouse Reports for Report Job
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/*

  report:
    name: Generate Report
    runs-on: ubuntu-latest
    needs: [get_jwt, lighthouse, download_artifacts]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lighthouse Reports
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci

      - name: Generate Performance Report
        run: |
          # Get scores from the lighthouse job outputs
          PERFORMANCE="${{ needs.lighthouse.outputs.performance }}"
          ACCESSIBILITY="${{ needs.lighthouse.outputs.accessibility }}"
          BEST_PRACTICES="${{ needs.lighthouse.outputs.best_practices }}"
          SEO="${{ needs.lighthouse.outputs.seo }}"

          # Format scores as percentages
          if [ "$PERFORMANCE" != "N/A" ]; then
            PERFORMANCE_PCT=$(echo "$PERFORMANCE * 100" | bc)
            PERFORMANCE_PCT="${PERFORMANCE_PCT%.*}%"
          else
            PERFORMANCE_PCT="N/A"
          fi

          if [ "$ACCESSIBILITY" != "N/A" ]; then
            ACCESSIBILITY_PCT=$(echo "$ACCESSIBILITY * 100" | bc)
            ACCESSIBILITY_PCT="${ACCESSIBILITY_PCT%.*}%"
          else
            ACCESSIBILITY_PCT="N/A"
          fi

          if [ "$BEST_PRACTICES" != "N/A" ]; then
            BEST_PRACTICES_PCT=$(echo "$BEST_PRACTICES * 100" | bc)
            BEST_PRACTICES_PCT="${BEST_PRACTICES_PCT%.*}%"
          else
            BEST_PRACTICES_PCT="N/A"
          fi

          if [ "$SEO" != "N/A" ]; then
            SEO_PCT=$(echo "$SEO * 100" | bc)
            SEO_PCT="${SEO_PCT%.*}%"
          else
            SEO_PCT="N/A"
          fi

          echo "# Performance Analysis Results" > performance-report.md
          echo "" >> performance-report.md
          echo "## URLs Analyzed" >> performance-report.md
          echo "- Local build: http://localhost:3000/" >> performance-report.md
          echo "- Local build: http://localhost:3000/?page=results" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Scores" >> performance-report.md
          echo "| Category | Score |" >> performance-report.md
          echo "| -------- | ----- |" >> performance-report.md
          echo "| Performance | $PERFORMANCE_PCT |" >> performance-report.md
          echo "| Accessibility | $ACCESSIBILITY_PCT |" >> performance-report.md
          echo "| Best Practices | $BEST_PRACTICES_PCT |" >> performance-report.md
          echo "| SEO | $SEO_PCT |" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Thresholds" >> performance-report.md
          echo "- Performance: Error if below 0.8" >> performance-report.md
          echo "- Accessibility: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- Best Practices: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "- SEO: Warning if below 0.8, Error if below 0.5" >> performance-report.md
          echo "" >> performance-report.md
          echo "## Summary" >> performance-report.md
          echo "This analysis was performed on the local build of the PR branch with a JWT token obtained from the API and injected as both an Authorization header and an access_token cookie before each evaluation." >> performance-report.md

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
